# -*- coding: utf-8 -*-
"""Copy of Hyper_Parameter_tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OYCoC_ws3IBqOU-O4XXAqD5ySQSbbpd1
"""

import pandas as pd

df = pd.read_csv("Iris.csv") # Titanic dataset or use any dataset of your choice
# df.head(4)

X = df[["SepalLengthCm","SepalWidthCm","PetalLengthCm","PetalWidthCm"]]
Y = df["Species"]

from sklearn.model_selection import train_test_split
X_train,X_test, y_train, y_test = train_test_split(X,Y,test_size=0.4, shuffle=True)

"""Desicon Tree (without hyper parameter tuning)"""

from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier()
model.fit(X_train,y_train)
y_pred = model.predict(X_test)

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

"""## Hyprer parameter tuning using GridSearch"""

from sklearn.model_selection import GridSearchCV

params = {
    "criterion" : ["gini","entropy"],
    "max_depth":[2,3,4,5,6,7,8],
    "min_samples_leaf":[1,2,4,5]
}

grid_search = GridSearchCV(model,params)

grid_search.fit(X_train,y_train)

print(grid_search.best_estimator_)

final_model = DecisionTreeClassifier(criterion="gini",
                                     max_depth=6,
                                     min_samples_leaf=4)

final_model.fit(X_train,y_train)

y_pred1 = final_model.predict(X_test)

print(classification_report(y_test, y_pred))

# log all these experiments as mlflow experiment